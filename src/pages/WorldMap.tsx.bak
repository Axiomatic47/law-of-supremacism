import React, { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { useNavigate } from "react-router-dom";
import { PageLayout } from "@/components/PageLayout";
import { cn } from "@/lib/utils";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { toast } from "@/components/ui/use-toast";
import { Info, Download, FileText, Loader2 } from "lucide-react";
import LeafletHeatMap from "@/components/LeafletHeatMap";
// Import for GDELT API client
import {
  fetchSupremacismData,
  fetchCountryAnalysis,
  runGdeltAnalysis,
  fetchRegionalSummary,
  checkAnalysisStatus
} from "@/lib/gdeltApi";

// Define the BlurPanel component
const BlurPanel = ({
  children,
  className
}: {
  children: React.ReactNode;
  className?: string;
}) => {
  return (
    <div
      className={cn(
        "relative rounded-lg p-8 sm:p-12",
        "backdrop-blur-md bg-black/80",
        "border border-white/10",
        "shadow-xl",
        className
      )}
    >
      {children}
    </div>
  );
};

// Updated legend to match the new heatmap visualization
const SupremacismLegend = () => (
  <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-8">
    <div className="bg-black/30 p-4 rounded-lg border border-white/10">
      <h3 className="text-lg font-medium mb-2 text-white">Supremacism-Egalitarianism Spectrum</h3>
      <div className="mb-4">
        <div className="h-6 w-full rounded-md"
             style={{background: 'linear-gradient(to right, #0000ff, #2a7fff, #ffffff, #ffaa00, #ff5500, #ff0000)'}}></div>
        <div className="flex justify-between mt-1 text-xs text-gray-300">
          <span>0 (Strong Egalitarianism)</span>
          <span>5 (Neutral)</span>
          <span>10 (Strong Supremacism)</span>
        </div>
      </div>
      <p className="text-sm text-gray-300 mt-2">
        This visualization demonstrates how supremacist and egalitarian forces behave analogously to
        thermodynamic principles, with surges and flows between regions.
      </p>
    </div>

    <div className="bg-black/30 p-4 rounded-lg border border-white/10">
      <h3 className="text-lg font-medium mb-2 text-white">Data Sources</h3>
      <ul className="text-gray-300 text-sm space-y-1">
        <li>• GDELT Conflict Events</li>
        <li>• Freedom House Democracy Index</li>
        <li>• UN Human Rights Reports</li>
        <li>• World Bank Economic Indicators</li>
        <li>• SIPRI Military Expenditure Database</li>
        <li>• Amnesty International Reports</li>
      </ul>
    </div>
  </div>
);

// Helper functions
const getColorClass = (score: number) => {
  if (score <= 2) return "bg-blue-500";
  if (score <= 4) return "bg-green-500";
  if (score <= 6) return "bg-yellow-500";
  if (score <= 8) return "bg-orange-500";
  return "bg-red-500";
};

const getTextColor = (score: number) => {
  if (score <= 2) return "text-blue-400";
  if (score <= 4) return "text-green-400";
  if (score <= 6) return "text-yellow-400";
  if (score <= 8) return "text-orange-400";
  return "text-red-400";
};

const getSTILabel = (score: number) => {
  if (score <= 20) return "Rapid Transition";
  if (score <= 40) return "Moderate Transition";
  if (score <= 60) return "Partial Transition";
  if (score <= 80) return "Enduring Supremacism";
  return "Supremacist Persistence";
};

const getSTIColorClass = (score: number) => {
  if (score <= 20) return "bg-blue-500";
  if (score <= 40) return "bg-green-500";
  if (score <= 60) return "bg-yellow-500";
  if (score <= 80) return "bg-orange-500";
  return "bg-red-500";
};

// Define types for our components
interface CountryData {
  code: string;
  country: string;
  srsD?: number;
  srsI?: number;
  sgm: number;
  gscs?: number;
  latitude: number;
  longitude: number;
  sti?: number;
  category?: string;
  description?: string;
  event_count?: number;
  avg_tone?: number;
  updated_at?: string;
  name?: string;
}

interface RegionData {
  region: string;
  avg_sgm: number;
  countries: number;
  highest_country: string;
  highest_sgm: number;
  lowest_country: string;
  lowest_sgm: number;
}

const CountryList = ({
  countries,
  onSelect,
  selectedCountry
}: {
  countries: CountryData[];
  onSelect: (country: CountryData) => void;
  selectedCountry?: CountryData;
}) => {
  const [searchTerm, setSearchTerm] = useState("");

  // Filter countries based on search term
  const filteredCountries = countries.filter(country =>
    (country.name || country.country || "").toLowerCase().includes(searchTerm.toLowerCase())
  );

  return (
    <div className="bg-black/30 p-4 rounded-lg border border-white/10 h-96 overflow-y-auto mt-4">
      <div className="sticky top-0 bg-black/70 p-2 -m-2 mb-2 backdrop-blur-sm border-b border-white/10">
        <input
          type="text"
          placeholder="Search countries..."
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          className="w-full bg-black/50 text-white border border-white/20 rounded p-2"
        />
      </div>
      <div className="grid grid-cols-1 gap-2">
        {filteredCountries.length === 0 && (
          <div className="text-center py-8 text-gray-400">
            No countries match your search
          </div>
        )}
        {filteredCountries.map(country => (
          <div
            key={country.code}
            onClick={() => onSelect(country)}
            className={cn(
              "p-2 rounded cursor-pointer border transition-colors",
              selectedCountry?.code === country.code
                ? "bg-white/20 border-white/30"
                : "bg-black/40 hover:bg-black/60 border-white/10"
            )}
          >
            <div className="flex justify-between">
              <span className="text-white">{country.name || country.country}</span>
              <span className={`${getColorClass(country.gscs || country.sgm)} px-2 rounded text-sm text-white`}>
                {(country.gscs || country.sgm).toFixed(1)}
              </span>
            </div>
            <div className="text-sm text-gray-400">{country.category}</div>
          </div>
        ))}
      </div>
    </div>
  );
};

const CountryDetail = ({
  country
}: {
  country?: CountryData;
}) => {
  if (!country) return null;

  return (
    <div className="bg-black/40 p-6 rounded-lg border border-white/10 mt-4">
      <h3 className="text-2xl font-medium text-white mb-4">{country.name || country.country}</h3>

      <div className="space-y-6">
        <div>
          <h4 className="text-lg text-white mb-2">Supremacist Risk Scores</h4>
          <div className="grid grid-cols-3 gap-4">
            <div className="bg-black/30 p-3 rounded">
              <div className="text-sm text-gray-400">Domestic (SRS-D)</div>
              <div className={`text-xl font-medium ${getTextColor(country.srsD || 0)}`}>{country.srsD?.toFixed(1) || "N/A"}</div>
            </div>
            <div className="bg-black/30 p-3 rounded">
              <div className="text-sm text-gray-400">International (SRS-I)</div>
              <div className={`text-xl font-medium ${getTextColor(country.srsI || 0)}`}>{country.srsI?.toFixed(1) || "N/A"}</div>
            </div>
            <div className="bg-black/30 p-3 rounded">
              <div className="text-sm text-gray-400">GSCS/SGM</div>
              <div className={`text-xl font-medium ${getTextColor(country.gscs || country.sgm)}`}>{(country.gscs || country.sgm).toFixed(1)}</div>
            </div>
          </div>
        </div>

        {country.sti && (
          <div>
            <h4 className="text-lg text-white mb-2">Stability & Transition</h4>
            <div className="bg-black/30 p-3 rounded">
              <div className="flex justify-between mb-1">
                <span className="text-sm text-gray-400">STI Score: {country.sti}</span>
                <span className="text-sm text-gray-400">{getSTILabel(country.sti)}</span>
              </div>
              <div className="w-full bg-gray-700 rounded-full h-2">
                <div
                  className={`${getSTIColorClass(country.sti)} h-2 rounded-full`}
                  style={{ width: `${country.sti}%` }}
                ></div>
              </div>
            </div>
          </div>
        )}

        {country.event_count && (
          <div>
            <h4 className="text-lg text-white mb-2">GDELT Data</h4>
            <div className="bg-black/30 p-3 rounded">
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <div className="text-sm text-gray-400">Conflict Events</div>
                  <div className="text-lg font-medium">{country.event_count}</div>
                </div>
                <div>
                  <div className="text-sm text-gray-400">Avg. Tone</div>
                  <div className="text-lg font-medium">{country.avg_tone?.toFixed(2) || "N/A"}</div>
                </div>
              </div>
            </div>
          </div>
        )}

        <div>
          <h4 className="text-lg text-white mb-2">Analysis</h4>
          <p className="text-gray-300">{country.description}</p>
        </div>

        {country.updated_at && (
          <div className="text-xs text-gray-400 mt-4">
            Last updated: {new Date(country.updated_at).toLocaleString()}
          </div>
        )}
      </div>
    </div>
  );
};

const RegionalChart = ({
  regionalData
}: {
  regionalData?: RegionData[] | null;
}) => {
  // If regionalData is provided, use it; otherwise use static data
  const regions = regionalData || [
    {
      region: "North America",
      avg_sgm: 4.8,
      countries: 3,
      highest_country: "United States",
      highest_sgm: 5.2,
      lowest_country: "Canada",
      lowest_sgm: 2.8
    },
    {
      region: "Europe",
      avg_sgm: 3.2,
      countries: 5,
      highest_country: "Russia",
      highest_sgm: 7.3,
      lowest_country: "Sweden",
      lowest_sgm: 1.7
    },
    {
      region: "Asia",
      avg_sgm: 6.1,
      countries: 6,
      highest_country: "China",
      highest_sgm: 7.0,
      lowest_country: "Japan",
      lowest_sgm: 3.6
    },
    {
      region: "Africa",
      avg_sgm: 5.7,
      countries: 3,
      highest_country: "South Africa",
      highest_sgm: 5.9,
      lowest_country: "Kenya",
      lowest_sgm: 5.1
    },
    {
      region: "South America",
      avg_sgm: 4.5,
      countries: 4,
      highest_country: "Brazil",
      highest_sgm: 4.7,
      lowest_country: "Chile",
      lowest_sgm: 3.9
    }
  ];

  return (
    <div className="bg-black/30 p-4 rounded-lg border border-white/10 h-full">
      <h3 className="text-lg font-medium mb-3 text-white">Regional Comparison</h3>
      <div className="h-64 bg-black/40 rounded border border-white/10 p-4">
        <div className="space-y-4">
          {regions.map(region => (
            <div key={region.region}>
              <div className="flex justify-between text-sm text-gray-400 mb-1">
                <span>{region.region}</span>
                <span>{region.avg_sgm.toFixed(1)}</span>
              </div>
              <div className="w-full bg-gray-700 rounded-full h-2">
                <div
                  className={getColorClass(region.avg_sgm) + " h-2 rounded-full"}
                  style={{ width: `${(region.avg_sgm / 10) * 100}%` }}
                ></div>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

const CategoryDistribution = ({
  countries
}: {
  countries: CountryData[];
}) => {
  // Count countries by category
  const categories = countries.reduce<Record<string, number>>((acc, country) => {
    const category = country.category || "Unknown";
    acc[category] = (acc[category] || 0) + 1;
    return acc;
  }, {});

  // Calculate total for percentages
  const total = Object.values(categories).reduce((sum, count) => sum + Number(count), 0);

  return (
    <div className="bg-black/30 p-4 rounded-lg border border-white/10 h-full">
      <h3 className="text-lg font-medium mb-3 text-white">Global Category Distribution</h3>
      <div className="space-y-4">
        {Object.entries(categories).map(([category, count]) => {
          const percentage = ((count / total) * 100).toFixed(1);
          const colorClass =
            category.includes("Non-Supremacist") ? "bg-blue-500" :
            category.includes("Mixed") ? "bg-green-500" :
            category.includes("Soft") ? "bg-yellow-500" :
            category.includes("Structural") ? "bg-orange-500" :
            "bg-red-500";

          return (
            <div key={category}>
              <div className="flex justify-between text-sm text-gray-400 mb-1">
                <span>{category}</span>
                <span>{count} countries ({percentage}%)</span>
              </div>
              <div className="w-full bg-gray-700 rounded-full h-2">
                <div className={`${colorClass} h-2 rounded-full`} style={{ width: `${percentage}%` }}></div>
              </div>
            </div>
          );
        })}
      </div>
    </div>
  );
};

const WorldMap = () => {
  const navigate = useNavigate();
  const [selectedCountry, setSelectedCountry] = useState<CountryData | undefined>(undefined);
  const [sgmData, setSgmData] = useState<CountryData[]>([]);
  const [regionalData, setRegionalData] = useState<RegionData[] | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [lastUpdated, setLastUpdated] = useState<Date | null>(null);
  // New state for tracking GDELT analysis
  const [isAnalysisRunning, setIsAnalysisRunning] = useState(false);
  const [analysisJobId, setAnalysisJobId] = useState<string | null>(null);
  const [analysisProgress, setAnalysisProgress] = useState(0);

  // Updated to try fetching from API first, then fall back to mock data
  useEffect(() => {
    const fetchSGMData = async () => {
      setIsLoading(true);
      setError(null);

      try {
        // Try to fetch from the GDELT API
        const data = await fetchSupremacismData();
        setSgmData(data);

        // Also try to fetch regional data
        try {
          const regions = await fetchRegionalSummary();
          setRegionalData(regions);
        } catch (regionError) {
          console.error("Error fetching regional data:", regionError);
          // Non-critical, so don't set main error
        }

        setLastUpdated(new Date());
        setIsLoading(false);

        toast({
          title: "GDELT Data Loaded",
          description: "Supremacism data has been successfully loaded from GDELT",
        });
      } catch (apiError) {
        console.error("API Error:", apiError);

        // Fall back to mock data
        setSgmData([]);
        setError(`API connection failed: ${apiError instanceof Error ? apiError.message : String(apiError)}. Using sample data.`);
        setIsLoading(false);

        toast({
          title: "Using Sample Data",
          description: "API connection failed. Using sample data instead.",
          variant: "warning"
        });
      }
    };

  return (
    <PageLayout>
      <div className="container mx-auto px-4 py-12 flex-grow">
        <BlurPanel>
          <Button
            variant="ghost"
            className="text-white mb-8 hover:bg-white/10"
            onClick={() => navigate("/")}
          >
            ← Back to Home
          </Button>

          <div className="flex justify-between items-center mb-8">
            <h1 className="text-4xl font-serif text-white drop-shadow-lg">Supremacism-Egalitarianism Map</h1>
            <div className="flex space-x-4">
              <Button
                variant="outline"
                className="bg-black/50 text-white border-white/20"
                onClick={refreshData}
                disabled={isLoading || isAnalysisRunning}
              >
                {isLoading ? (
                  <>
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    Refreshing...
                  </>
                ) : (
                  "Refresh Data"
                )}
              </Button>
              {/* New button for triggering GDELT analysis */}
              <Button
                variant="outline"
                className="bg-black/50 text-white border-white/20"
                onClick={startGdeltAnalysis}
                disabled={isLoading || isAnalysisRunning}
              >
                {isAnalysisRunning ? (
                  <>
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    {analysisProgress > 0 ? `Analyzing (${Math.round(analysisProgress)}%)` : "Analyzing..."}
                  </>
                ) : (
                  <>
                    <FileText className="mr-2 h-4 w-4" />
                    Run GDELT Analysis
                  </>
                )}
              </Button>
              <Button
                variant="outline"
                className="bg-black/50 text-white border-white/20"
              >
                <FileText className="mr-2 h-4 w-4" />
                Methodology
              </Button>
            </div>
          </div>

          {error ? (
            <Alert className="bg-black/40 border-red-400 mb-6">
              <Info className="h-4 w-4" />
              <AlertTitle className="text-white">API Connection Error</AlertTitle>
              <AlertDescription className="text-gray-300">
                {error}
              </AlertDescription>
            </Alert>
          ) : (
            <>
              {lastUpdated && (
                <Alert className="bg-black/40 border-white/20 mb-6">
                  <Info className="h-4 w-4" />
                  <AlertTitle className="text-white">GDELT Data Updated</AlertTitle>
                  <AlertDescription className="text-gray-300">
                    Supremacist-Egalitarianism data was last refreshed on {lastUpdated.toLocaleDateString()} at {lastUpdated.toLocaleTimeString()},
                    incorporating the latest events from the GDELT database.
                  </AlertDescription>
                </Alert>
              )}

              <Tabs defaultValue="map" className="w-full">
                <TabsList className="w-full bg-black/40 border border-white/10 mb-6">
                  <TabsTrigger value="map" className="flex-1">World Map</TabsTrigger>
                  <TabsTrigger value="countries" className="flex-1">Country Analysis</TabsTrigger>
                  <TabsTrigger value="trends" className="flex-1">Global Trends</TabsTrigger>
                  <TabsTrigger value="research" className="flex-1">Research Data</TabsTrigger>
                </TabsList>

                <TabsContent value="map">
                  <div className="bg-white p-1 rounded-lg overflow-hidden shadow-xl mb-4">
                    {/* Container with white background to make the map stand out from the dark theme */}
                    <LeafletHeatMap
                      countries={sgmData}
                      onSelectCountry={setSelectedCountry}
                      isLoading={isLoading || isAnalysisRunning}
                    />
                  </div>
                  <SupremacismLegend />
                </TabsContent>

                <TabsContent value="countries">
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                    <div className="md:col-span-1">
                      <h2 className="text-xl text-white mb-2">Countries</h2>
                      <CountryList
                        countries={sgmData}
                        onSelect={setSelectedCountry}
                        selectedCountry={selectedCountry}
                      />
                    </div>
                    <div className="md:col-span-2">
                      <h2 className="text-xl text-white mb-2">Detailed Analysis</h2>
                      {selectedCountry ? (
                        <CountryDetail country={selectedCountry} />
                      ) : (
                        <div className="bg-black/40 p-6 rounded-lg border border-white/10 mt-4 text-center py-12">
                          <p className="text-gray-300">Select a country to view detailed analysis</p>
                        </div>
                      )}
                    </div>
                  </div>
                </TabsContent>

                <TabsContent value="trends">
                  <div className="space-y-6">
                    <div className="bg-black/30 p-6 rounded-lg border border-white/10">
                      <h2 className="text-2xl text-white mb-4">Global Thermodynamic Analysis</h2>
                      <p className="text-gray-300 mb-4">
                        Track worldwide thermodynamic-like patterns in the flow between supremacism and egalitarianism
                        according to the Supremacist-Egalitarianism Methodology.
                      </p>
                      <div className="h-64 bg-black/40 rounded border border-white/10 flex items-center justify-center">
                        <span className="text-gray-400">Thermodynamic trend chart visualization coming soon</span>
                      </div>
                    </div>

                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <RegionalChart regionalData={regionalData} />
                      <CategoryDistribution countries={sgmData} />
                    </div>
                  </div>
                </TabsContent>

                <TabsContent value="research">
                  <div className="space-y-6">
                    <div className="bg-black/30 p-6 rounded-lg border border-white/10">
                      <h2 className="text-2xl text-white mb-4">Fundamental Laws of Supremacism & Egalitarianism</h2>
                      <p className="text-gray-300">
                        These laws provide a framework analogous to thermodynamics for understanding social power dynamics.
                        The heatmap visualization demonstrates how these forces behave with thermodynamic-like properties.
                      </p>

                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-6">
                        <div className="bg-black/40 p-4 rounded-lg border border-white/10">
                          <h3 className="text-lg text-white mb-2">Core Components</h3>
                          <ul className="space-y-2 text-gray-300">
                            <li>• <span className="text-white">Supremacism-Egalitarianism Spectrum:</span> 0-10 scale measuring governance models</li>
                            <li>• <span className="text-white">Dual Risk Scores:</span> Separate metrics for domestic (SRS-D) and international (SRS-I)</li>
                            <li>• <span className="text-white">GSCS/SGM:</span> Combined score representing overall position on the spectrum</li>
                            <li>• <span className="text-white">Stability and Transition Index:</span> Measures governance stability</li>
                          </ul>
                        </div>

                        <div className="bg-black/40 p-4 rounded-lg border border-white/10">
                          <h3 className="text-lg text-white mb-2">Thermodynamic Properties</h3>
                          <p className="text-gray-300 text-sm">
                            The Supremacism-Egalitarianism framework demonstrates properties analogous to thermodynamics:
                          </p>
                          <ul className="space-y-1 text-gray-300 text-sm mt-2">
                            <li>• Flow from high-concentration to low-concentration regions</li>
                            <li>• Conservation of total power within closed systems</li>
                            <li>• Entropy-like tendency toward disorder in unregulated systems</li>
                            <li>• Resistance to change requiring energy input</li>
                          </ul>
                        </div>
                      </div>

                      <div className="mt-6">
                        <Button
                          variant="outline"
                          className="bg-black/50 text-white border-white/20"
                        >
                          <FileText className="mr-2 h-4 w-4" />
                          View Full Methodology
                        </Button>
                      </div>
                    </div>

                    <div className="bg-black/30 p-6 rounded-lg border border-white/10">
                      <h2 className="text-2xl text-white mb-4">Data Sources & API</h2>
                      <p className="text-gray-300 mb-4">
                        The supremacism-egalitarianism data is compiled primarily from GDELT and updated by our service.
                        Researchers can access the raw data through our API.
                      </p>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div className="bg-black/40 p-4 rounded-lg border border-white/10">
                          <h3 className="text-lg text-white mb-2">API Endpoints</h3>
                          <ul className="space-y-1 text-gray-300 text-sm">
                            <li>• <code className="bg-black/50 px-1 rounded">GET /api/sgm/countries</code> - Get all country scores</li>
                            <li>• <code className="bg-black/50 px-1 rounded">GET /api/sgm/countries/{'{country_code}'}</code> - Get specific country</li>
                            <li>• <code className="bg-black/50 px-1 rounded">POST /api/sgm/run-analysis</code> - Trigger new GDELT analysis</li>
                          </ul>
                        </div>
                        <div className="bg-black/40 p-4 rounded-lg border border-white/10">
                          <h3 className="text-lg text-white mb-2">Download Data</h3>
                          <p className="text-gray-300 text-sm mb-4">
                            You can download the data in different formats for research purposes.
                          </p>
                          <Button
                            variant="outline"
                            className="w-full bg-black/50 text-white border-white/20"
                            onClick={() => {
                              // Create JSON file for download
                              const dataStr = JSON.stringify(sgmData, null, 2);
                              const dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);

                              // Create download link
                              const exportFileDefaultName = 'supremacism_egalitarianism_data.json';
                              const linkElement = document.createElement('a');
                              linkElement.setAttribute('href', dataUri);
                              linkElement.setAttribute('download', exportFileDefaultName);
                              linkElement.click();
                            }}
                          >
                            <Download className="mr-2 h-4 w-4" />
                            Download Dataset (JSON)
                          </Button>
                        </div>
                      </div>
                    </div>
                  </div>
                </TabsContent>
              </Tabs>
            </>
          )}
        </BlurPanel>
      </div>
    </PageLayout>
  );

    fetchSGMData();
  }, []);

  // Updated to fetch fresh data from API
  const refreshData = async () => {
    setIsLoading(true);
    setError(null);

    try {
      // Fetch from the GDELT API
      const data = await fetchSupremacismData();
      setSgmData(data);

      // Also refresh regional data
      try {
        const regions = await fetchRegionalSummary();
        setRegionalData(regions);
      } catch (regionError) {
        console.error("Error refreshing regional data:", regionError);
      }

      setLastUpdated(new Date());
      setIsLoading(false);

      toast({
        title: "Data Refreshed",
        description: "Supremacism data has been updated from GDELT",
      });
    } catch (error) {
      console.error("Error refreshing data:", error);
      setError(`Failed to refresh data: ${error instanceof Error ? error.message : String(error)}`);
      setIsLoading(false);

      toast({
        title: "Refresh Failed",
        description: error instanceof Error ? error.message : String(error),
        variant: "destructive"
      });
    }
  };

  // New function to trigger GDELT analysis
  const startGdeltAnalysis = async () => {
    setIsAnalysisRunning(true);
    setAnalysisProgress(0);

    try {
      const result = await runGdeltAnalysis();
      setAnalysisJobId(result.jobId);

      toast({
        title: "Analysis Started",
        description: `New GDELT analysis has been initiated. Job ID: ${result.jobId || 'Unknown'}`,
      });

      // Wait a bit and then start polling for completion
      setTimeout(() => {
        pollAnalysisStatus(result.jobId);
      }, 5000);
    } catch (error) {
      console.error("Error starting analysis:", error);

      toast({
        title: "Analysis Failed",
        description: error instanceof Error ? error.message : String(error),
        variant: "destructive"
      });

      setIsAnalysisRunning(false);
    }
  };

  // Poll for analysis completion
  const pollAnalysisStatus = async (jobId: string) => {
    if (!jobId) return;

    try {
      // Check job status
      const statusResult = await checkAnalysisStatus(jobId);

      // Update progress
      if (statusResult.progress) {
        setAnalysisProgress(statusResult.progress * 100);
      }

      // If completed, refresh data
      if (statusResult.status === "completed") {
        toast({
          title: "Analysis Complete",
          description: statusResult.message || "GDELT data has been processed. Refreshing data...",
        });

        refreshData();
        setIsAnalysisRunning(false);
        setAnalysisJobId(null);
        return;
      }

      // If failed, show error
      if (statusResult.status === "failed") {
        toast({
          title: "Analysis Failed",
          description: statusResult.message || "GDELT analysis failed",
          variant: "destructive"
        });

        setIsAnalysisRunning(false);
        setAnalysisJobId(null);
        return;
      }

      // Continue polling
      setTimeout(() => pollAnalysisStatus(jobId), 2000);
    } catch (error) {
      console.error("Error checking analysis status:", error);

      // Fallback to simulated completion
      setTimeout(() => {
        toast({
          title: "Analysis Complete",
          description: "GDELT data has been processed. Refreshing data...",
        });

        refreshData();
        setIsAnalysisRunning(false);
        setAnalysisJobId(null);
      }, 8000);
    }
  };